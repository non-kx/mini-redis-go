// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	net "net"
	reflect "reflect"

	payload "bitbucket.org/non-pn/mini-redis-go/internal/payload"
	pubsub "bitbucket.org/non-pn/mini-redis-go/internal/service/pubsub"
	tlv "bitbucket.org/non-pn/mini-redis-go/internal/tools/tlv"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceHandler is a mock of ServiceHandler interface.
type MockServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceHandlerMockRecorder
}

// MockServiceHandlerMockRecorder is the mock recorder for MockServiceHandler.
type MockServiceHandlerMockRecorder struct {
	mock *MockServiceHandler
}

// NewMockServiceHandler creates a new mock instance.
func NewMockServiceHandler(ctrl *gomock.Controller) *MockServiceHandler {
	mock := &MockServiceHandler{ctrl: ctrl}
	mock.recorder = &MockServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceHandler) EXPECT() *MockServiceHandlerMockRecorder {
	return m.recorder
}

// HandleDisconnected mocks base method.
func (m *MockServiceHandler) HandleDisconnected(conn net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDisconnected", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDisconnected indicates an expected call of HandleDisconnected.
func (mr *MockServiceHandlerMockRecorder) HandleDisconnected(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDisconnected", reflect.TypeOf((*MockServiceHandler)(nil).HandleDisconnected), conn)
}

// HandleRequest mocks base method.
func (m *MockServiceHandler) HandleRequest(ctx payload.IRequestContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockServiceHandlerMockRecorder) HandleRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockServiceHandler)(nil).HandleRequest), ctx)
}

// MockServiceRequester is a mock of ServiceRequester interface.
type MockServiceRequester struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRequesterMockRecorder
}

// MockServiceRequesterMockRecorder is the mock recorder for MockServiceRequester.
type MockServiceRequesterMockRecorder struct {
	mock *MockServiceRequester
}

// NewMockServiceRequester creates a new mock instance.
func NewMockServiceRequester(ctrl *gomock.Controller) *MockServiceRequester {
	mock := &MockServiceRequester{ctrl: ctrl}
	mock.recorder = &MockServiceRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRequester) EXPECT() *MockServiceRequesterMockRecorder {
	return m.recorder
}

// SendGetRequest mocks base method.
func (m *MockServiceRequester) SendGetRequest(conn net.Conn, key string) (tlv.TLVCompatible, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGetRequest", conn, key)
	ret0, _ := ret[0].(tlv.TLVCompatible)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGetRequest indicates an expected call of SendGetRequest.
func (mr *MockServiceRequesterMockRecorder) SendGetRequest(conn, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGetRequest", reflect.TypeOf((*MockServiceRequester)(nil).SendGetRequest), conn, key)
}

// SendPingRequest mocks base method.
func (m *MockServiceRequester) SendPingRequest(conn net.Conn, msg *string) (*tlv.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPingRequest", conn, msg)
	ret0, _ := ret[0].(*tlv.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPingRequest indicates an expected call of SendPingRequest.
func (mr *MockServiceRequesterMockRecorder) SendPingRequest(conn, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPingRequest", reflect.TypeOf((*MockServiceRequester)(nil).SendPingRequest), conn, msg)
}

// SendPubRequest mocks base method.
func (m *MockServiceRequester) SendPubRequest(conn net.Conn, topic string, val tlv.TypeLengthValue) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPubRequest", conn, topic, val)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPubRequest indicates an expected call of SendPubRequest.
func (mr *MockServiceRequesterMockRecorder) SendPubRequest(conn, topic, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPubRequest", reflect.TypeOf((*MockServiceRequester)(nil).SendPubRequest), conn, topic, val)
}

// SendSetRequest mocks base method.
func (m *MockServiceRequester) SendSetRequest(conn net.Conn, key string, val tlv.TypeLengthValue) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSetRequest", conn, key, val)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSetRequest indicates an expected call of SendSetRequest.
func (mr *MockServiceRequesterMockRecorder) SendSetRequest(conn, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSetRequest", reflect.TypeOf((*MockServiceRequester)(nil).SendSetRequest), conn, key, val)
}

// SendSubRequest mocks base method.
func (m *MockServiceRequester) SendSubRequest(conn net.Conn, topic string) (*pubsub.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSubRequest", conn, topic)
	ret0, _ := ret[0].(*pubsub.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSubRequest indicates an expected call of SendSubRequest.
func (mr *MockServiceRequesterMockRecorder) SendSubRequest(conn, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSubRequest", reflect.TypeOf((*MockServiceRequester)(nil).SendSubRequest), conn, topic)
}

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// HandleDisconnected mocks base method.
func (m *MockIService) HandleDisconnected(conn net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDisconnected", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDisconnected indicates an expected call of HandleDisconnected.
func (mr *MockIServiceMockRecorder) HandleDisconnected(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDisconnected", reflect.TypeOf((*MockIService)(nil).HandleDisconnected), conn)
}

// HandleRequest mocks base method.
func (m *MockIService) HandleRequest(ctx payload.IRequestContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockIServiceMockRecorder) HandleRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockIService)(nil).HandleRequest), ctx)
}

// SendGetRequest mocks base method.
func (m *MockIService) SendGetRequest(conn net.Conn, key string) (tlv.TLVCompatible, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGetRequest", conn, key)
	ret0, _ := ret[0].(tlv.TLVCompatible)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGetRequest indicates an expected call of SendGetRequest.
func (mr *MockIServiceMockRecorder) SendGetRequest(conn, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGetRequest", reflect.TypeOf((*MockIService)(nil).SendGetRequest), conn, key)
}

// SendPingRequest mocks base method.
func (m *MockIService) SendPingRequest(conn net.Conn, msg *string) (*tlv.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPingRequest", conn, msg)
	ret0, _ := ret[0].(*tlv.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPingRequest indicates an expected call of SendPingRequest.
func (mr *MockIServiceMockRecorder) SendPingRequest(conn, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPingRequest", reflect.TypeOf((*MockIService)(nil).SendPingRequest), conn, msg)
}

// SendPubRequest mocks base method.
func (m *MockIService) SendPubRequest(conn net.Conn, topic string, val tlv.TypeLengthValue) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPubRequest", conn, topic, val)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPubRequest indicates an expected call of SendPubRequest.
func (mr *MockIServiceMockRecorder) SendPubRequest(conn, topic, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPubRequest", reflect.TypeOf((*MockIService)(nil).SendPubRequest), conn, topic, val)
}

// SendSetRequest mocks base method.
func (m *MockIService) SendSetRequest(conn net.Conn, key string, val tlv.TypeLengthValue) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSetRequest", conn, key, val)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSetRequest indicates an expected call of SendSetRequest.
func (mr *MockIServiceMockRecorder) SendSetRequest(conn, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSetRequest", reflect.TypeOf((*MockIService)(nil).SendSetRequest), conn, key, val)
}

// SendSubRequest mocks base method.
func (m *MockIService) SendSubRequest(conn net.Conn, topic string) (*pubsub.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSubRequest", conn, topic)
	ret0, _ := ret[0].(*pubsub.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSubRequest indicates an expected call of SendSubRequest.
func (mr *MockIServiceMockRecorder) SendSubRequest(conn, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSubRequest", reflect.TypeOf((*MockIService)(nil).SendSubRequest), conn, topic)
}
