// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/network/transport.go

// Package mock_network is a generated GoMock package.
package mock_network

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransporter is a mock of Transporter interface.
type MockTransporter struct {
	ctrl     *gomock.Controller
	recorder *MockTransporterMockRecorder
}

// MockTransporterMockRecorder is the mock recorder for MockTransporter.
type MockTransporterMockRecorder struct {
	mock *MockTransporter
}

// NewMockTransporter creates a new mock instance.
func NewMockTransporter(ctrl *gomock.Controller) *MockTransporter {
	mock := &MockTransporter{ctrl: ctrl}
	mock.recorder = &MockTransporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransporter) EXPECT() *MockTransporterMockRecorder {
	return m.recorder
}

// EstablishConnection mocks base method.
func (m *MockTransporter) EstablishConnection() (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstablishConnection")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstablishConnection indicates an expected call of EstablishConnection.
func (mr *MockTransporterMockRecorder) EstablishConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstablishConnection", reflect.TypeOf((*MockTransporter)(nil).EstablishConnection))
}

// GetListener mocks base method.
func (m *MockTransporter) GetListener() (net.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListener")
	ret0, _ := ret[0].(net.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListener indicates an expected call of GetListener.
func (mr *MockTransporterMockRecorder) GetListener() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListener", reflect.TypeOf((*MockTransporter)(nil).GetListener))
}
