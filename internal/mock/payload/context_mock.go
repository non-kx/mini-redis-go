// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/payload/context.go

// Package mock_payload is a generated GoMock package.
package mock_payload

import (
	reflect "reflect"

	payload "bitbucket.org/non-pn/mini-redis-go/internal/payload"
	gomock "go.uber.org/mock/gomock"
)

// MockIRequestContext is a mock of IRequestContext interface.
type MockIRequestContext struct {
	ctrl     *gomock.Controller
	recorder *MockIRequestContextMockRecorder
}

// MockIRequestContextMockRecorder is the mock recorder for MockIRequestContext.
type MockIRequestContextMockRecorder struct {
	mock *MockIRequestContext
}

// NewMockIRequestContext creates a new mock instance.
func NewMockIRequestContext(ctrl *gomock.Controller) *MockIRequestContext {
	mock := &MockIRequestContext{ctrl: ctrl}
	mock.recorder = &MockIRequestContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRequestContext) EXPECT() *MockIRequestContextMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockIRequestContext) Error(code uint16, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error", code, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockIRequestContextMockRecorder) Error(code, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockIRequestContext)(nil).Error), code, msg)
}

// Response mocks base method.
func (m *MockIRequestContext) Response(res payload.ResponsePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response", res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockIRequestContextMockRecorder) Response(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockIRequestContext)(nil).Response), res)
}
